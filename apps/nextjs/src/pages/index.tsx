import { useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";

import { api, type RouterInputs } from "~/utils/api";

type MuscleGroups = RouterInputs["workout"]["create"]["muscleGroups"];
type EquipmentStyle = RouterInputs["workout"]["create"]["equipmentStyle"];

const CreateWorkoutForm: React.FC = () => {
  const [minutes, setMinutes] = useState(0);
  const [muscleGroups, setMuscleGroups] = useState<MuscleGroups>([]);
  const [equipmentStyle, setEquipmentStyle] =
    useState<EquipmentStyle>("fully equipped gym");

  const { isLoading, data, mutate, error } = api.workout.create.useMutation({
    async onSuccess() {
      setMinutes(0);
      setMuscleGroups([]);
      setEquipmentStyle("none");
    },
  });

  return (
    <div className="flex w-full max-w-2xl flex-col p-4">
      <input
        className="mb-2 rounded bg-white/10 p-2 text-white"
        value={minutes}
        type="number"
        onChange={(e) => {
          if (e.target.value === "") {
            setMinutes(0);
          }
          setMinutes(parseInt(e.target.value, 10));
        }}
        placeholder="Minutes"
      />
      {error?.data?.zodError?.fieldErrors.minutes && (
        <span className="mb-2 text-red-500">
          {error.data.zodError.fieldErrors.minutes}
        </span>
      )}
      <select
        className="mb-2 rounded bg-white/10 p-2 text-white"
        multiple
        onChange={(e) => {
          console.log(e);
          setMuscleGroups((prev) => [
            ...prev,
            e.target.value as MuscleGroups[number],
          ]);
        }}
        placeholder="Content"
      >
        <option value="chest">Chest</option>
        <option value="back">Back</option>
        <option value="triceps">Triceps</option>
        <option value="biceps">Biceps</option>
      </select>
      <select
        className="mb-2 rounded bg-white/10 p-2 text-white"
        onChange={(e) => {
          console.log(e.target.value);
          setEquipmentStyle(e.target.value as EquipmentStyle);
        }}
        placeholder="Content"
      >
        <option value="none">None</option>
        <option value="fully equipped gym">Fully Equipped Gym</option>
      </select>
      {error?.data?.zodError?.fieldErrors.muscleGroups && (
        <span className="mb-2 text-red-500">
          {error.data.zodError.fieldErrors.muscleGroups}
        </span>
      )}
      <div className="flex flex-col gap-4">
        muscleGroups:{" "}
        <div className="flex gap-x-2">
          {muscleGroups.map((m) => (
            <span>{m}</span>
          ))}
        </div>
        EquipmentStyle: {equipmentStyle}
        Minutes: {minutes}
      </div>
      <button
        className="rounded bg-pink-400 p-2 font-bold"
        onClick={() => {
          mutate({
            minutes,
            muscleGroups,
            equipmentStyle,
          });
        }}
      >
        {isLoading ? "Creating workout..." : "Create"}
      </button>
      {data && data.length > 0 && (
        <div className="flex flex-col gap-4">
          {data.map((exercise) => (
            <div className="flex gap-2">
              <div>{exercise.name}</div>
              <div>
                {exercise.sets}x{exercise.reps}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white">
        <div className="container mt-12 flex flex-col items-center justify-center gap-4 px-4 py-8">
          <h1 className="text-5xl font-extrabold tracking-tight sm:text-[5rem]">
            tra<span className="text-pink-400">ai</span>n
          </h1>

          <CreateWorkoutForm />
        </div>
      </main>
    </>
  );
};

export default Home;
